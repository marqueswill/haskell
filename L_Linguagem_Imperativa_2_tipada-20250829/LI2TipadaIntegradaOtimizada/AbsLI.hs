{-# LANGUAGE DeriveDataTypeable, StandaloneDeriving #-}


module AbsLI where

-- Haskell module generated by the BNF converter

import Data.Generics (Data, Typeable)



newtype Ident = Ident String deriving (Eq, Ord, Show, Read, Data, Typeable )
data Program = Prog [Function]
  deriving (Eq, Ord, Show, Read, Data, Typeable)

data Function = Fun Type Ident [Decl] [Stm]
  deriving (Eq, Ord, Show, Read, Data, Typeable)

data Decl = Dec Type Ident
  deriving (Eq, Ord, Show, Read, Data, Typeable)

data Stm
    = SDec Decl
    | SDecls Type Ident [Ident]
    | SInit Type Ident Exp
    | CDec Type Ident Exp
    | SAss Ident Exp
    | SBlock [Stm]
    | SWhile Exp Stm
    | SDWhile Stm Exp
    | SReturn Exp
    | SIf Exp Stm Stm
  deriving (Eq, Ord, Show, Read, Data, Typeable)

data Type = Tbool | Tint | Tvoid | TStr | TFun Function
  deriving (Eq, Ord, Show, Read, Data, Typeable)

data Exp
    = EOr Exp Exp
    | EAnd Exp Exp
    | ENot Exp
    | ECon Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | Call Ident [Exp]
    | EInt Integer
    | EVar Ident
    | EStr String
    | ETrue
    | EFalse
  deriving (Eq, Ord, Show, Read, Data, Typeable)

