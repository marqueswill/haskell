-- File generated by the BNF Converter (bnfc 2.9.5).
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language LF2.
module AbsLF where

import Data.String qualified
import Prelude (Integer, String)
import Prelude qualified as C (Eq, Ord, Read, Show)

data Program = Prog [Function]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function = Fun Type Ident [Decl] Exp -- Não faria mais sentido se a definição fosse Fun Decl [Decl] Exp?
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Dec Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Tbool | Tint | TStr | TFun Type [Type]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Exp
  = EIf Exp Exp Exp
  | EOr Exp Exp
  | EAnd Exp Exp
  | ENot Exp
  | ECon Exp Exp
  | EAdd Exp Exp
  | ESub Exp Exp
  | EMul Exp Exp
  | EDiv Exp Exp
  | ECall Ident [Exp]
  | EInt Integer
  | EVar Ident
  | EStr String
  | ETrue
  | EFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read)
